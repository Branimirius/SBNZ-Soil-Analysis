//created on: May 29, 2022
package integracija

//list any import classes here.

import sbnz.integracija.example.facts.Soil;
import sbnz.integracija.example.facts.Fertilizer;
import sbnz.integracija.example.facts.Recommendation;
import sbnz.integracija.example.facts.Fertilization;
import sbnz.integracija.example.OperationService;
import java.util.ArrayList;

//declare any global variables here
global OperationService operationService;
global ArrayList plants;


rule "Recommend NPK proportion"
	salience 2
    when
        $soil: Soil($kgn: kgN, $kgp: kgP , $kgk: kgK, plant.equals("") == false, $r: recommendation)
        $list: ArrayList( size > 0) from collect(
        	Fertilizer(P > 0 || K > 0)
        )
        
        $f: Fertilizer() from operationService.getOptimalFertilizer($list, $kgp, $kgk)
    then
    	$r.setFertilizerNPK($f);
    	$soil.setFertilizer($f);
        $soil.setRecommendation($r);
		
		update($soil);
		
end

rule "Calculate kilograms of fertilizer"
    salience 1
    when
        $soil: Soil( plant.equals("") == false, $r: recommendation, fertMassFixed == false)
        String(length() > 0) from $soil.getFertilizer().getName()
        $fertMass: Integer() from operationService.calculateMassRecommendation($soil)
    then
    	$r.setMassFertilizerNPK($fertMass);
        $soil.setRecommendation($r);
        $soil.setFertMassFixed(true);
        insert(new Recommendation($r));
        update($soil);

end

rule "NPK combo managing"
	when 
	
		Number(intValue < 3) from accumulate(
			$e: Fertilization(fertilizer.equals("caco3"), daysAgo > 180),
			count($e)
		)
		
		$soil: Soil(fertMassFixed == true)
		$kalFerts: ArrayList(size > 0) from collect (
			Fertilizer( N == 11, P == 52, (K % 30) == 0)
		)
		
		$rec: Recommendation(stringFertNPK.equals("") == true,
							  $f: fertilizerNPK memberOf $kalFerts					  
							 )
		 
	then
		System.out.println("NPK combo managing");
		$rec.setStringFertNPK("MAP 11 52 0 => " + $rec.getMassFertilizerNPK() 
			+ "Kg; " + "Kalijum 0 0 30 => " + ($rec.getMassFertilizerNPK() * ($f.getK()/30)) + "Kg; ");
		
		$soil.setRecommendation($rec);
		update($rec);
		update($soil);
		
	
end

rule "Nitrogen not optimised"
	when
		Number(intValue > 2) from accumulate(
			$e: Fertilization(fertilizer.equals("manure"), daysAgo > 100),
			count($e)
		)
		
		$ferts: ArrayList(size > 0) from collect (
			Fertilizer(N > 0)
			)
			
		$kan: Fertilizer(N == 27, P == 0, K == 0)
		$rec: Recommendation( nitroOptimised == false, $mass: massFertilizerNPK, $f: fertilizerNPK memberOf $ferts) 
		$soil: Soil($kgn: kgN != 1)
	then
		$rec.setFertilizerN($kan);
		$rec.setMassFertilizerN(operationService.calculateMassKAN($kgn, $f, $mass));
		$rec.setNitroOptimised(true);
		$soil.setRecommendation($rec);
		update($rec);
		update($soil);
end

rule "UREA needed"
	when
		$soil: Soil()
		$kan: Fertilizer(N == 27, P == 0, K == 0)
		$urea: Fertilizer(N == 46, P == 0, K == 0)
		$rec: Recommendation(fertilizerN == $kan, $mass: massFertilizerN > 250.0, nitroOptimised == true)
	then
		$rec.setFertilizerN($urea);
		$rec.setMassFertilizerN(operationService.calculateMassUREA($mass));
		$soil.setRecommendation($rec);
		update($rec);
		update($soil);
		
	
end

rule "Waiting needed"
	when
		$fert: Fertilizer(P > 0)
		$soil: Soil($rec: recommendation)
		Recommendation(fertilizerNPK.equals($fert))
		
		Number(intValue > 0) from accumulate(
			$e: Fertilization(fertilizer.equals("caco3"), daysAgo < 100),
			count($e)
		)
		
	then
		System.out.println("Wait for 6 months after fertilizing with caco3");
end

